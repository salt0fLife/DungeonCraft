[gd_resource type="Shader" format=3 uid="uid://dncyx1op0mu1y"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_lambert,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform vec3 internal_col : source_color;
uniform vec3 fog_col : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float proximity_fade_distance;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float idle_sway = 1.0;
uniform float internal_col_strength = 1.0;
uniform float internal_col_shape = 1.0;
uniform float squash = 1.0;
uniform float walk = 0.0;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;// + vec2(0.0,TIME*walk*0.5);
	VERTEX.y += pow(VERTEX.y,2.0)*0.75*squash;
	VERTEX.y -= VERTEX.y *0.3*squash;
	VERTEX.y -= 0.15*squash;
	VERTEX.x += VERTEX.x*(squash-1.0)*0.25;
	VERTEX.z += VERTEX.z*(squash-1.0)*0.25;
	VERTEX.y += sin(TIME*1.5+VERTEX.z*16.0+VERTEX.x)*0.005*idle_sway;
	VERTEX.y += sin(TIME*1.5+VERTEX.x*16.0+VERTEX.z)*0.005*idle_sway;
	VERTEX.y += (sin(TIME*8.0+VERTEX.z*5.0))*0.05*walk;
	VERTEX.z += (cos(TIME*8.0+VERTEX.z*5.0))*0.05*walk;
	VERTEX.x += sin(TIME*4.0-VERTEX.z*0.5)*0.025*walk;
}






void fragment() {
	float fresnel = 1.0 - dot(NORMAL,VIEW)*internal_col_strength;
	fresnel = pow(fresnel, internal_col_shape);
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
	float depth_tex = textureLod(depth_texture,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance - dot(NORMAL,VIEW)*0.3,world_pos.z,VERTEX.z),0.0,1.0);
	ALBEDO = mix(ALBEDO, internal_col, 1.0-clamp(fresnel, 0.0, 1.0));
	ALBEDO = mix(ALBEDO, fog_col, clamp(smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0));
	ALPHA -= clamp(clamp(smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0) - clamp(1.0-dot(NORMAL,VIEW),0.25,1.0),0.0,1.0);
	ALPHA = clamp(ALPHA, 0.0 ,1.0);
}
"
